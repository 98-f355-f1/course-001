#!/usr/bin/env ruby

require "optparse"

require_relative "../lib/file_details"

parser = OptionParser.new
params = {}

parser.on("-a") { params[:all_files]    = true }
parser.on("-l") { params[:show_details] = true }


begin
  params[:files] = parser.parse(ARGV)
rescue OptionParser::InvalidOption => e
  bad_flag = e.message[/invalid option: -(.*)/, 1]
  abort "ls: illegal option -- #{bad_flag}\n"+
        "usage: ls [-ABCFGHLOPRSTUWabcdefghiklmnopqrstuwx1] [file ...]"
end

dir_listing  = params[:files].empty? ||
               (params[:files].length == 1 && File.directory?(params[:files][0]))


if dir_listing 
  Dir.chdir(params[:files][0]) unless params[:files].empty?

  files = params[:all_files] ? Dir.glob("*", File::FNM_DOTMATCH) : Dir.glob("*")

  if params[:show_details] 
    blocks = files.reduce(0) { |s,e| File.exist?(e) ? s + File.stat(e).blocks : s }
    puts "total #{blocks}"
  end
else
  dir_listing = true
  files = params[:files]
end

files.each do |f|
  abort("ls: #{f}: No such file or directory") unless File.exist?(f)
end


details_list = FileDetails::List.new(files)

details_list.each do |details|
  if params[:show_details]
    puts [details[:permissions],
          details[:links].to_s.rjust(details_list.column_widths[:links] + 1, " "),          
          "#{details[:owner]}  #{details[:group]}",
          details[:size].to_s.rjust(details_list.column_widths[:size] + 1, " "),
          details[:mtime],
          details[:name]].join(" ")
  else
    puts details[:name]
  end
end
